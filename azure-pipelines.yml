trigger:
- none

variables:
  azureServiceConnectionId: 'c78d8c7f-5be6-46cf-b588-c04ca835ec40'
  webAppName: 'fastapi-python'
  resourceGroupName: 'anshu-test-rg1'
  vmImageName: 'ubuntu-latest'
  environmentName: 'python-fastapi-demo-webapp'
  projectRoot: $(System.DefaultWorkingDirectory)
  pythonVersion: '3.12'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:

    # Step 1: Prepare SonarCloud
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'sonar-qube-cloud'  # Name of your service connection
        organization: 'anshupacific-terraform'  # e.g. mycompany-org
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'anshupacific-terraform_python-fastapi-azure-webapp'  # e.g. fastapi-python
        cliProjectName: 'fastapi-python'
        extraProperties: |
          sonar.sources=.
          sonar.python.version=$(pythonVersion)

    # Step 2: Use Python
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    # Step 3: Install dependencies
    - script: |
        python -m venv antenv
        source antenv/bin/activate
        python -m pip install --upgrade pip
        pip install setup
        pip install -r requirements.txt
      workingDirectory: $(projectRoot)
      displayName: "Install requirements"

    # Step 4: Analyze code with SonarCloud
    - task: SonarCloudAnalyze@1
      displayName: 'Run SonarCloud analysis'

    # Step 5: Publish SonarCloud results
    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'
      displayName: 'Publish SonarCloud results'

    # Step 6: Package for deployment
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : $(webAppName)'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
              resourceGroupName: $(resourceGroupName)
